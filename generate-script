#! /bin/sh

cat <<'EOF_'
#! /bin/sh


print_usage_exit() {
    echo "Usage: $(basename $0) [-s SITE] FILE..."
    exit 1
}

get_site_data() {
    local SITE="$1"

    local site_data="$(echo "${SITES_JSON}" | jq -c -r ".[\"${SITE}\"]")"
    [ "${site_data}" = null ] && site_data="$(echo "${SITES_JSON}" |
        jq -c -r ".[]|select(.aliases)|select(.aliases[]|.==\"${SITE}\")")"

    echo "${site_data}"
}

get_site_data_default() {
    local SITE="$1"
    local DEFAULT_SITE="$2"

    local site_data="$(find_site_data "${SITENAME}")"
    [ "${site_data}" = null ] && site_data="$(find_site_data "${DEFAULT_SITENAME}")"

    echo "${site_data}"
}

get_field_value() {
    local FIELDNAME="$1"
    local DEFAULT_VALUE="$2"

    local field_value="$(echo "${SITE_DATA}" | jq -c -r ."${FIELDNAME}")"
    [ -n "${DEFAULT_VALUE}" -a "${field_value}" = null ] && field_value="${DEFAULT_VALUE}"

    echo "${field_value}"
}


DEFAULT_SITE=comfy.moe
SITE="${DEFAULT_SITE}"

while getopts ':s:' x; do
    case $x in
        s)
            SITE="${OPTARG}"
            ;;
        \?)
            echo "Invalid option: -${OPTARG}" >&2
            print_usage_exit
            ;;
        \:)
            echo "-${OPTARG} needs an argument" >&2
            print_usage_exit
            ;;
    esac
done
shift $((OPTIND-1))

if [ $# -lt 1 ]; then
    print_usage_exit
fi


SITES_JSON=$(cat <<'EOF'
EOF_

cat sites.json

cat <<'EOF_'
EOF
)


SITE_DATA="$(get_site_data "${SITE}" "${DEFAULT_SITE}")"

UPLOAD_URL="$(get_field_value upload)"
DOWNLOAD_URL="$(get_field_value download)"
FILE_FORM_NAME="$(get_field_value file_form_name 'files[]')"
RESPONSE_TEMPLATE="$(get_field_value response '$json:files[].url')"
case "${RESPONSE_TEMPLATE}" in
    '$url')       HANDLE_RESPONSE='(cat; echo) | head -n 1' ;;  # Checking for eol would make code ugly
    '$json:'*)    HANDLE_RESPONSE="jq -c -r $(echo "${RESPONSE_TEMPLATE}" | sed 's/^\$json:/./')" ;;
    *)            echo "Wrong response template value: \"${RESPONSE_TEMPLATE}\"" >&2; exit 1 ;;
esac

ADDITIONAL_FORM_HEADERS="$(echo "${SITE_DATA}" \
    | jq -c -r 'select(.headers)|.headers|to_entries[]|"\(.key)=\(.value)"')"

FORM_HEADERS="$(printf -- "-F '${FILE_FORM_NAME}=@%s' " "$@" | head -c -1)"
[ -n "${ADDITIONAL_FORM_HEADERS}" ] && \
    FORM_HEADERS="${FORM_HEADERS} $(printf -- "-F '%s' " "${ADDITIONAL_FORM_HEADERS}" | head -c -1)"

eval "curl -fsSL ${FORM_HEADERS} '${UPLOAD_URL}' | ${HANDLE_RESPONSE}"
EOF_
