#! /bin/sh


print_help_exit() {
cat <<EOF
Usage: $(basename "$0") [-u|-f|-p] [-s SITE] FILE...

Options:
  -s SITE           Specify the site name to upload (default: comfy.moe)
  -u                Output URL
  -f                Output filename only
  -p                Output the same way as the server responses

Supported sites:
  * aww.moe (alias: aww)
  * catbox.moe (alias: catbox)
  * comfy.moe (alias: comfy) (default)
  * desu.sh (alias: desu)
  * pomf.cat
EOF
    exit 0
}

print_usage_exit() {
    echo "Usage: $(basename "$0") [-u|-f|-p] [-s SITE] FILE..."
    exit 1
}

get_site_data() {
    _SITE_="$1"

    _site_data_="$(echo "${SITES_JSON}" | jq -r ".sites[\"${_SITE_}\"]")"
    [ "${_site_data_}" = null ] && _site_data_="$(echo "${SITES_JSON}" |
        jq -r ".sites[]|select(.aliases)|select(.aliases[]|.==\"${_SITE_}\")")"

    echo "${_site_data_}"
}

get_field_value() {
    _FIELDNAME_="$1"
    _DEFAULT_VALUE_="$2"

    _field_value_="$(echo "${SITE_DATA}" | jq -r ."${_FIELDNAME_}")"
    ([ -n "${_DEFAULT_VALUE_}" ] && [ "${_field_value_}" = null ]) && _field_value_="${_DEFAULT_VALUE_}"

    echo "${_field_value_}"
}


SITES_JSON=$(cat <<'EOF'
{
    "default": "comfy.moe",
    "sites": {
        "aww.moe": {
            "aliases": ["aww"],
            "upload": "https://aww.moe/upload.php",
            "download": "https://aww.moe/$result"
        },
        "catbox.moe": {
            "aliases": ["catbox"],
            "file_form_name": "fileToUpload",
            "multiple_files": false,
            "headers": {
                "reqtype": "fileupload"
            },
            "upload": "https://catbox.moe/user/api.php",
            "download": "$result",
            "response": "$url"
        },
        "comfy.moe": {
            "aliases": ["comfy"],
            "upload": "https://comfy.moe/upload.php",
            "download": "$result"
        },
        "desu.sh": {
            "aliases": ["desu"],
            "upload": "https://desu.sh/upload.php",
            "download": "https://desu.sh/$result"
        },
        "pomf.cat": {
            "upload": "https://pomf.cat/upload.php",
            "download": "https://a.pomf.cat/$result"
        }
    }
}
EOF
)


DEFAULT_SITE="$(echo "${SITES_JSON}" | jq -r '.default')"
SITE="${DEFAULT_SITE}"
OUTPUT_TYPE="url"

while getopts ':hs:ufp' x; do
    case $x in
        h)
            print_help_exit
            ;;
        s)
            SITE="${OPTARG}"
            ;;
        u)
            OUTPUT_TYPE="url"
            ;;
        f)
            OUTPUT_TYPE="filename"
            ;;
        p)
            OUTPUT_TYPE="preserve"
            ;;
        \?)
            echo -- "Invalid option: -${OPTARG}" >&2
            print_usage_exit
            ;;
        :)
            echo -- "-${OPTARG} needs an argument" >&2
            print_usage_exit
            ;;
    esac
done
shift $((OPTIND-1))

if [ $# -lt 1 ]; then
    print_usage_exit
fi


SITE_DATA="$(get_site_data "${SITE}")"

UPLOAD_URL="$(get_field_value upload)"
DOWNLOAD_URL="$(get_field_value download)"
FILE_FORM_NAME="$(get_field_value file_form_name 'files[]')"
MULTIPLE_FILES="$(get_field_value multiple_files 'true')"
RESPONSE_TEMPLATE="$(get_field_value response "\$json:files[].url")"
case "${RESPONSE_TEMPLATE}" in
    "\$url")       HANDLE_RESPONSE='(cat; echo) | head -n 1' ;;  # Checking for eol would make code ugly
    "\$json:"*)    HANDLE_RESPONSE="jq -r $(echo "${RESPONSE_TEMPLATE}" | sed "s/^\$json:/./")" ;;
    *)             echo "Wrong response template value: \"${RESPONSE_TEMPLATE}\"" >&2; exit 1 ;;
esac

ADDITIONAL_FORM_HEADERS="$(echo "${SITE_DATA}" \
    | jq -r 'select(.headers)|.headers|to_entries[]|"\(.key)=\(.value)"')"

upload_print() {
    # shellcheck disable=SC2039
    _FORM_HEADERS_="$(printf -- "-F '${FILE_FORM_NAME}=@%s' " "$@" | head -c -1)"
    # shellcheck disable=SC2039
    [ -n "${ADDITIONAL_FORM_HEADERS}" ] && \
        _FORM_HEADERS_="${_FORM_HEADERS_} \
            $(printf -- "-F '%s' " "${ADDITIONAL_FORM_HEADERS}" | head -c -1)"

    # Uses single quotes inside ${_FORM_HEADERS_} to support filenames containing spaces and
    # a subshell construct (cmd; cmd) in ${HANDLE_RESPONSE}, so we have to eval it
    _OUTPUT_="$(eval "curl -fsSL ${_FORM_HEADERS_} '${UPLOAD_URL}' | ${HANDLE_RESPONSE}")"
    echo "${_OUTPUT_}" | while read -r line; do
        case "${OUTPUT_TYPE}" in
            url)
                echo "${DOWNLOAD_URL}" | sed "s|\$result|${line}|"
                ;;
            filename)
                # Filename must be the last entry in any given URL that points to a file
                echo "${line}" | tr '/' '\n' | tail -n 1
                ;;
            preserve)
                echo "${line}"
                ;;
        esac
    done
}

if [ "${MULTIPLE_FILES}" = true ]; then
    upload_print "$@"
else
    for filename in "$@"; do
        upload_print "${filename}"
    done
fi
