#! /bin/sh


print_help_exit() {
cat <<EOF
Usage: $(basename "$0") [-u|-f|-p] [-t|-S SUFFIX] [-s SITE]... FILE...

Options:
  -h                Show this help message and exit

  -s SITE           Specify the site name to upload, can be used
                    multiple times to upload to multiple sites
                    (default sites: yiff.moe)
  -S SUFFIX         Upload as files with the specified SUFFIX
  -t                Upload as text files (equivalent to -S txt)

  -u                Output URL
  -f                Output filename only
  -p                Output the same way as the server responses

  -v                Increase verbosity, can be specified multiple times
  -q                Decrease verbosity, can be specified multiple times

Supported sites:
  * aww.moe (alias: aww)
  * catbox.moe (alias: catbox)
  * comfy.moe (alias: comfy)
  * desu.sh (alias: desu)
  * glop.me (alias: glop)
  * jii.moe (alias: jii)
  * maro.xyz (alias: maro)
  * mixtape.moe (alias: mixtape)
  * pomf.cat
  * uguu.se
  * vidga.me (alias: vidga)
  * yiff.moe (alias: yiff) (default)
EOF
    exit 0
}

print_usage_exit() {
    echo "Usage: $(basename "$0") [-u|-f|-p] [-t|-S SUFFIX] [-s SITE]... FILE..."
    exit 1
}

print_message() {
    _MSG_LEVEL_="$1"
    _FORMAT_="$2"
    shift 2

    # shellcheck disable=SC2059
    [ "${_MSG_LEVEL_}" -le "${VERBOSITY}" ] && printf "${_FORMAT_}\n" "$@" >&2
}

alias error='print_message 1'
alias warning='print_message 2'
alias info='print_message 3'
alias debug='print_message 4'


get_site_data() {
    _SITE_="$1"

    _site_data_="$(echo "${SITES_JSON}" | jq -r ".sites[\"${_SITE_}\"]")"
    [ "${_site_data_}" = null ] && _site_data_="$(echo "${SITES_JSON}" |
        jq -r ".sites[]|select(.aliases)|select(.aliases[]|.==\"${_SITE_}\")")"

    echo "${_site_data_}"
}

get_sites_data() {
    _SITES_COUNT_="$1"
    shift $(($# - _SITES_COUNT_))

    for site in "$@"; do
        _sites_data_="$(printf -- '%s\n%s' "${_sites_data_}" "$(get_site_data "${site}")")"
    done

    echo "${_sites_data_}"
}

get_field_value() {
    _SITE_DATA_="$1"
    _FIELDNAME_="$2"
    _DEFAULT_VALUE_="$3"

    _field_value_="$(echo "${_SITE_DATA_}" | jq -r ."${_FIELDNAME_}")"
    ([ -n "${_DEFAULT_VALUE_}" ] && [ "${_field_value_}" = null ]) && _field_value_="${_DEFAULT_VALUE_}"

    echo "${_field_value_}"
}


SITES_JSON=$(cat <<'EOF'
{
    "default": "yiff.moe",
    "sites": {
        "aww.moe": {
            "aliases": ["aww"],
            "upload": "https://aww.moe/upload.php",
            "download": "https://aww.moe/$result"
        },
        "catbox.moe": {
            "aliases": ["catbox"],
            "file_form_name": "fileToUpload",
            "multiple_files": false,
            "headers": {
                "reqtype": "fileupload"
            },
            "upload": "https://catbox.moe/user/api.php",
            "download": "$result",
            "response": "$url"
        },
        "comfy.moe": {
            "aliases": ["comfy"],
            "upload": "https://comfy.moe/upload.php",
            "download": "$result"
        },
        "desu.sh": {
            "aliases": ["desu"],
            "upload": "https://desu.sh/upload.php",
            "download": "https://desu.sh/$result"
        },
        "glop.me": {
            "aliases": ["glop"],
            "upload": "http://glop.me/upload.php",
            "download": "http://gateway.glop.me/ipfs/$result"
        },
        "jii.moe": {
            "aliases": ["jii"],
            "file_form_name": "file",
            "multiple_files": false,
            "upload": "https://jii.moe/api/v1/upload",
            "download": "$result",
            "response": "$json:url"
        },
        "maro.xyz": {
            "aliases": ["maro"],
            "file_form_name": "file",
            "multiple_files": false,
            "upload": "https://maro.xyz/api/upload",
            "download": "$result",
            "response": "$json:short_url"
        },
        "mixtape.moe": {
            "aliases": ["mixtape"],
            "upload": "https://mixtape.moe/upload.php",
            "download": "$result"
        },
        "pomf.cat": {
            "upload": "https://pomf.cat/upload.php",
            "download": "https://a.pomf.cat/$result"
        },
        "uguu.se": {
            "file_form_name": "file",
            "multiple_files": false,
            "headers": {
                "randomname": "whatever"
            },
            "upload": "https://uguu.se/api.php?d=upload-tool",
            "download": "$result",
            "response": "$url"
        },
        "vidga.me": {
            "aliases": ["vidga"],
            "upload": "https://vidga.me/upload.php",
            "download": "$result"
        },
        "yiff.moe": {
            "aliases": ["yiff"],
            "upload": "https://yiff.moe/upload.php",
            "download": "$result"
        }
    }
}
EOF
)


# Save default sites names in newline-separated jq strings, which preserve whitespace
DEFAULT_SITES="$(echo "${SITES_JSON}" | jq -c '.default|if type=="array" then .[] else . end')"
SITES_COUNT=0
OUTPUT_TYPE='url'
VERBOSITY=2

while getopts ':hvqs:tS:ufp' x; do
    case $x in
        h)
            print_help_exit
            ;;
        v)
            VERBOSITY=$((VERBOSITY+1))
            ;;
        q)
            VERBOSITY=$((VERBOSITY-1))
            ;;
        s)
            SITES_COUNT=$((SITES_COUNT+1))
            set -- "$@" "${OPTARG}"
            # dash-only (bash and posh can work properly without this workaround):
            # dash restarts (sets OPTIND to 1 and parses "$@" from the beginning) getopts if
            # "$@" is changed before the while loop finishes a step, effectively producing
            # an infinite loop;
            # shifting forces subsequent getopts calls to skip already handled parameters
            shift $((OPTIND-1))    # Parse from the beginning of the *shifted* array
            OPTIND=1    # As you remember, bash and posh do not reset OPTIND automatically
            ;;
        t)
            SUFFIX='txt'
            ;;
        S)
            SUFFIX="${OPTARG}"
            ;;
        u)
            OUTPUT_TYPE='url'
            ;;
        f)
            OUTPUT_TYPE='filename'
            ;;
        p)
            OUTPUT_TYPE='preserve'
            ;;
        \?)
            echo -- "Invalid option: -${OPTARG}" >&2
            print_usage_exit
            ;;
        :)
            echo -- "-${OPTARG} needs an argument" >&2
            print_usage_exit
            ;;
    esac
done
shift $((OPTIND-1))

if [ $# -lt 1 ]; then
    print_usage_exit
fi


[ "$SITES_COUNT" -eq 0 ] && while read -r line; do
    SITES_COUNT=$((SITES_COUNT+1))
    set -- "$@" "$(echo "${line}" | jq -r .)"
# Avoid subshelling to be able to set variable
done <<EOF
    ${DEFAULT_SITES}
EOF

SITES_DATA="$(get_sites_data "${SITES_COUNT}" "$@")"

# Remove sites names from "$@", only filenames are allowed to be there
TO_SHIFT=$#
for arg; do
    [ $# -eq $((TO_SHIFT + (TO_SHIFT - SITES_COUNT))) ] && break
    set -- "$@" "${arg}"
done
shift $((TO_SHIFT))


if [ -n "${SUFFIX}" ]; then
    TEMPDIR="$(mktemp --directory)"
    [ -d "${TEMPDIR}" ] || (echo "Couldn't create a temporary directory" >&2 && exit 1)

    TO_SHIFT=$#
    for filename in "$@"; do
        new_filename="$(basename "${filename}").${SUFFIX}"
        ln -s "${filename}" "${TEMPDIR}/${new_filename}"
        set -- "$@" "${new_filename}"
    done
    shift $((TO_SHIFT))

    # Server doesn't need to know the exact locations of our temporary symlinks
    cd "${TEMPDIR}" || (echo "Failed to cd to ${TEMPDIR}" >&2 && exit 1)
fi


build_response_handler() {
    _SITE_DATA_="$1"

    _RESPONSE_TEMPLATE_="$(get_field_value "${_SITE_DATA_}" response "\$json:files[].url")"
    case "${_RESPONSE_TEMPLATE_}" in
        "\$url")       _HANDLE_RESPONSE_='(cat; echo) | head -n 1' ;;  # Checking for eol would make code ugly
        "\$json:"*)    _HANDLE_RESPONSE_="jq -r $(echo "${_RESPONSE_TEMPLATE_}" | sed "s/^\$json:/./")" ;;
        *)             echo "Wrong response template value: \"${_RESPONSE_TEMPLATE_}\"" >&2; exit 1 ;;
    esac

    echo "${_HANDLE_RESPONSE_}"
}

build_form_headers() {
    _SITE_DATA_="$1"
    shift 1

    _FILE_FORM_NAME_="$(get_field_value "${_SITE_DATA_}" file_form_name 'files[]')"
    _ADDITIONAL_FORM_HEADERS_="$(echo "${_SITE_DATA_}" \
        | jq -r 'select(.headers)|.headers|to_entries[]|"\(.key)=\(.value)"')"

    # shellcheck disable=SC2039
    _FORM_HEADERS_="$(printf -- "-F '${_FILE_FORM_NAME_}=@%s' " "$@" | head -c -1)"
    # shellcheck disable=SC2039
    [ -n "${_ADDITIONAL_FORM_HEADERS_}" ] && \
        while read -r line; do
            _FORM_HEADERS_="${_FORM_HEADERS_} \
                $(printf -- "-F '%s' " "${line}" | head -c -1)"
        done <<EOF
            ${_ADDITIONAL_FORM_HEADERS_}
EOF

    echo "${_FORM_HEADERS_}"
}

upload_print() {
    _SITE_DATA_="$1"
    shift 1

    _UPLOAD_URL_="$(get_field_value "${_SITE_DATA_}" upload)"
    _DOWNLOAD_URL_="$(get_field_value "${_SITE_DATA_}" download)"

    _HANDLE_RESPONSE_="$(build_response_handler "${_SITE_DATA_}")"
    _FORM_HEADERS_="$(build_form_headers "${_SITE_DATA_}" "$@")"

    # Single quotes inside ${_FORM_HEADERS_} to support filenames containing spaces and
    # a subshell construct (cmd; cmd) in ${_HANDLE_RESPONSE_} used here, so we have to eval

    # Let stderr through to print curl error messages
    _RESPONSE_="$(eval "curl -fsSL ${_FORM_HEADERS_} -w '\n%{http_code}' '${_UPLOAD_URL_}'")"
    _CURL_CODE_=$?
    if [ "$(echo "${_RESPONSE_}" | tail -n 1)" -ne 200 ]; then
        info "curl finished with ${_CURL_CODE_} exit code"
        info "Response:\n${_RESPONSE_}"
        exit $((_CURL_CODE_))
    else
        info "Response:\n${_RESPONSE_}"
    fi

    _OUTPUT_="$(echo "${_RESPONSE_}" | head -n -1 | eval "${_HANDLE_RESPONSE_}")"
    echo "${_OUTPUT_}" | while read -r line; do
        case "${OUTPUT_TYPE}" in
            url)
                echo "${_DOWNLOAD_URL_}" | sed "s|\$result|${line}|"
                ;;
            filename)
                # Filename must be the last entry in any given URL that points to a file
                echo "${line}" | tr '/' '\n' | tail -n 1
                ;;
            preserve)
                echo "${line}"
                ;;
        esac
    done
}


echo "${SITES_DATA}" | jq -c . | while read -r line; do
    MULTIPLE_FILES="$(get_field_value "${line}" multiple_files 'true')"
    info 'Files:'
    info '    %s' "$@"

    if [ "${MULTIPLE_FILES}" = true ]; then
        info 'Multiple files uploading is supported'
        upload_print "${line}" "$@"
    else
        info 'Only single file uploading is supported'
        for filename in "$@"; do
            info "Uploading \"%s\" ..." "${filename}"
            upload_print "${line}" "${filename}"
        done
    fi
done

# Cleanup
[ -n "${TEMPDIR}" ] && cd "${OLDPWD}" && rm -r "${TEMPDIR}"
